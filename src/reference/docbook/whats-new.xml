<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="whats-new"
	xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>What's New</title>

	<section>
		<title>Changes in 1.4 Since 1.3</title>
		<section>
			<title>@RabbitListener Annotation</title>
			<para>
				POJO listeners can be annotated with <code>@RabbitListener</code>, enabled
				by <code>@EnableRabbit</code> or <code>&lt;rabbit:annotation-driven /&gt;</code>.
				Spring Framework 4.1 is required for this feature.
				See <xref linkend="async-annotation-driven" /> for more information.
			</para>
		</section>
		<section>
			<title>RabbitMessagingTemplate</title>
			<para>
				A new <classname>RabbitMessagingTemplate</classname> is provided to allow users
				to interact with RabbitMQ using <code>spring-messaging</code> <classname>Message</classname>s.
				It uses the <classname>RabbitTemplate</classname> internally which can be configured
				as normal.
				Spring Framework 4.1 is required for this feature.
				See <xref linkend="template-messaging" /> for more information.
			</para>
		</section>
		<section>
			<title>Listener Container 'Missing Queues Fatal' Attribute</title>
			<para>
				1.3.5 introduced the <code>missingQueuesFatal</code> property on the
				<classname>SimpleMessageListenerContainer</classname>. This is now
				available on the listener container namespace element.
				See <xref linkend="containerAttributes"/>.
			</para>
		</section>
		<section>
			<title>RabbitTemplate 'ConfirmCallback' Interface</title>
			<para>
				The <code>confirm</code> method on this interface has an additional
				parameter <code>cause</code>. When available, this parameter will
				contain the reason for a negative acknowledgement (nack).
				See <xref linkend="template-confirms"/>.
			</para>
		</section>
		<section>
			<title>RabbitConnectionFactoryBean</title>
			<para>
				A factory bean is now provided to create the underlying RabbitMQ
				<classname>ConnectionFactory</classname> used by the
				<classname>CachingConnectionFactory</classname>. This enables
				configuration of SSL options using Spring's dependency
				injection.
				See <xref linkend="connection-factory"/>.
			</para>
		</section>
		<section>
			<title>CachingConnectionFactory</title>
			<para>
				The <classname>CachingConnectionFactory</classname> now allows
				the <code>connectionTimeout</code> to be set as a property
				or as an attribute in the namespace. It sets the property
				on the underlying RabbitMQ <classname>ConnectionFactory</classname>
				See <xref linkend="connection-factory"/>.
			</para>
		</section>
		<section>
			<title>Log Appender</title>
			<para>
				The Logback <classname>org.springframework.amqp.rabbit.logback.AmqpAppender</classname>
				has been introduced. It provides similar options like
				<classname>org.springframework.amqp.rabbit.log4j.AmqpAppender</classname>.
				For more info see JavaDocs of these classes.
			</para>
			<para>
				The Log4j <classname>AmqpAppender</classname> now supports the
				<code>deliveryMode</code> property (<code>PERSISTENT</code> or
				<code>NON_PERSISTENT</code>, default: <code>PERSISTENT</code>).
				Previously, all log4j messages were PERSISTENT.
			</para>
			<para>
				The appender also supports modification of the <classname>Message</classname>
				before sending - allowing, for example, the addition of custom
				headers. Subclasses should override the
				<code>postProcessMessageBeforeSend()</code>.
			</para>
		</section>
		<section>
			<title>Listener Queues</title>
			<para>
				The listener container now, by default, redeclares any missing queues during startup.
				A new <code>auto-declare</code> attribute has been added to the
				<code>&lt;rabbit:listener-container&gt;</code> to prevent these redeclarations.
				See <xref linkend="lc-auto-delete"/>.
			</para>
		</section>
		<section>
			<title>RabbitTemplate: mandatory and connectionFactorySelector Expressions</title>
			<para>
				The <code>mandatoryExpression</code> and <code>sendConnectionFactorySelectorExpression</code>
				and <code>receiveConnectionFactorySelectorExpression</code> SpEL
				<interfacename>Expression</interfacename>s properties
				have been added to the <classname>RabbitTemplate</classname>.
				The <code>mandatoryExpression</code> is used to evaluate a <code>mandatory</code>
				boolean value against each request message, when a <classname>ReturnCallback</classname> is in use.
				See <xref linkend="template-confirms"/>.
				The <code>sendConnectionFactorySelectorExpression</code> and
				<code>receiveConnectionFactorySelectorExpression</code> are used when an
				<classname>AbstractRoutingConnectionFactory</classname> is provided, to determine the
				<code>lookupKey</code> for the target <interfacename>ConnectionFactory</interfacename> at runtime on
				each AMQP protocol interaction operation.
				See <xref linkend="routing-connection-factory"/>.
			</para>
		</section>
		<section>
			<title>Listeners and the Routing Connection Factory</title>
			<para>
				A <classname>SimpleMessageListenerContainer</classname> can be configured with a routing
				connection factory to enable connection selection based on the queue names.
				See <xref linkend="routing-connection-factory"/>.
			</para>
		</section>
		<section>
			<title>RabbitTemplate: RecoveryCallback option</title>
			<para>
				The <code>recoveryCallback</code> property has been added to be used in the
				<code>retryTemplate.execute()</code>.
				See <xref linkend="template-retry"/>.
			</para>
		</section>
		<section>
			<title>MessageConversionException</title>
			<para>
				This exception is now a subclass of <classname>AmqpException</classname>; if you have code like
				the following:
			</para>
				<programlisting language="java"><![CDATA[try {
    template.convertAndSend("foo", "bar", "baz");
}
catch (AmqpException e) {
	...
}
catch (MessageConversionException e) {
	...
}]]></programlisting>
			<para>
				The second catch block will no longer be reachable and needs to be moved above the catch-all
				<classname>AmqpException</classname> catch block.
			</para>
		</section>
		<section>
			<title>RabbitMQ 3.4 Compatibility</title>
			<para>
				Spring AMQP is now compatible with the <emphasis>RabbitMQ 3.4</emphasis>,
				including direct reply-to; see <xref linkend="compatibility" /> and
				<xref linkend="direct-reply-to" /> for more information.
			</para>
		</section>
		<section>
			<title>ContentTypeDelegatingMessageConverter</title>
			<para>
				The <classname>ContentTypeDelegatingMessageConverter</classname> has been introduced to select
				the <interfacename>MessageConverter</interfacename> to use, based on the <code>contentType</code>
				property in the <classname>MessageProperties</classname>. See <xref linkend="message-converters"/>
				for more information.
			</para>
		</section>
	</section>

	<section>
		<title>Changes in 1.3 Since 1.2</title>
		<section>
			<title>Listener Concurrency</title>
			<para>
				The listener container now supports dynamic scaling of the number of consumers
				based on workload, or the concurrency can be programmatically changed without
				stopping the container. See <xref linkend="listener-concurrency" />.
			</para>
		</section>
		<section>
			<title>Listener Queues</title>
			<para>
				The listener container now permits the queue(s) on which it is listening to
				be modified at runtime. Also, the container will now start if at least one
				of its configured queues is available for use.
				See <xref linkend="listener-queues" />
			</para>
			<para>
				This listener container will now redeclare any auto-delete queues during
				startup. See <xref linkend="lc-auto-delete"/>.
			</para>
		</section>
		<section>
			<title>Consumer Priority</title>
			<para>
				The listener container now supports consumer arguments, allowing the
				<code>x-priority</code> argument to be set. See <xref linkend="consumer-priority" />.
			</para>
		</section>
		<section>
			<title>Exclusive Consumer</title>
			<para>
				The <classname>SimpleMessageListenerContainer</classname> can now be configured
				with a single <code>exclusive</code> consumer, preventing other consumers from
				listening to the queue. See <xref linkend="exclusive-consumer" />.
			</para>
		</section>
		<section>
			<title>Rabbit Admin</title>
			<para>
				It is now possible to have the Broker generate the queue name, regardless
				of durable, autoDelete and exclusive settings.
				See <xref linkend="broker-configuration" />.
			</para>
		</section>
		<section>
			<title>Direct Exchange Binding</title>
			<para>
				Previously, omitting the <code>key</code> attribute from a <code>binding</code> element
				of a <code>direct-exchange</code> configuration caused the queue or exchange to be bound with an
				empty string as the routing key. Now it is bound with the
				the name of the provided <classname>Queue</classname> or <classname>Exchange</classname>.
				Users wishing to bind with an empty string routing key need to specify
				<code>key=""</code>.
			</para>
		</section>
		<section>
			<title>AMQP Template</title>
			<para>
				The <interfacename>AmqpTemplate</interfacename> now
				provides several synchronous <code>receiveAndReply</code> methods. These are implemented
				by the <classname>RabbitTemplate</classname>.
				For more information see <xref linkend="receiving-messages" />.
			</para>
			<para>
				The <classname>RabbitTemplate</classname> now supports configuring a
				<classname>RetryTemplate</classname> to attempt retries (with optional back off
				policy) for when the broker is not available. For more information see
				<xref linkend="template-retry" />.
			</para>
		</section>
		<section>
			<title>Caching Connection Factory</title>
			<para>
				The caching connection factory can now be configured to cache <code>Connection</code>s
				and their <code>Channel</code>s instead of using a single
				connection and caching just <code>Channel</code>s. See <xref linkend="connections"/>.
			</para>
		</section>
		<section>
			<title>Binding Arguments</title>
			<para>
				The <code>&lt;exchange&gt;</code>'s <code>&lt;binding&gt;</code> now supports parsing of
				the <code>&lt;binding-arguments&gt;</code> sub-element. The <code>&lt;headers-exchange&gt;</code>'s
				<code>&lt;binding&gt;</code> now can be configured with a <code>key/value</code> attribute pair
				(to match on a single header)
				or with a <code>&lt;binding-arguments&gt;</code> sub-element, allowing matching on multiple
				headers; these options are mutually exclusive. See <xref linkend="headers-exchange" />.
			</para>
		</section>
		<section>
			<title>Routing Connection Factory</title>
			<para>
				A new <classname>SimpleRoutingConnectionFactory</classname> has been introduced,
				to allow configuration of <classname>ConnectionFactories</classname> mapping to determine
				the target <classname>ConnectionFactory</classname> to use at runtime.
				See <xref linkend="routing-connection-factory" />.
			</para>
		</section>
		<section>
			<title>MessageBuilder and MessagePropertiesBuilder</title>
			<para>
				"Fluent APIs" for building messages and/or message properties is now provided.
				See <xref linkend="message-builder"/>.
			</para>
		</section>
		<section>
			<title>RetryInterceptorBuilder</title>
			<para>
				A "Fluent API" for building listener container retry interceptors is now provided.
				See <xref linkend="retry"/>.
			</para>
		</section>
		<section>
			<title>RepublishMessageRecoverer</title>
			<para>
				This new <interfacename>MessageRecoverer</interfacename> is provided to allow publishing
				a failed message to another queue (including stack trace information in the header) when
				retries are exhausted. See <xref linkend="async-listeners"/>.
			</para>
		</section>
		<section>
			<title>Default Error Handler (Since 1.3.2)</title>
			<para>
				A default <classname>ConditionalRejectingErrorHandler</classname> has been added
				to the listener container. This error handler detects message conversion problems
				(which are fatal) and instructs the container to reject the message to prevent
				the broker from continually redelivering the unconvertible message.
				See <xref linkend="exception-handling"/>.
			</para>
		</section>
		<section>
			<title>Listener Container 'missingQueuesFatal` Property (Since 1.3.5)</title>
			<para>
				The <classname>SimpleMessageListenerContainer</classname> now has a property
				<code>missingQueuesFatal</code> (default <code>true</code>). Previously,
				missing queues were always fatal.
				See <xref linkend="containerAttributes"/>.
			</para>
		</section>
	</section>

	<section>
		<title>Changes to 1.2 Since 1.1</title>
		<section>
			<title>RabbitMQ Version</title>
			<para>
				Spring AMQP now using RabbitMQ 3.1.x by default (but retains
				compatibility with earlier versions). Certain deprecations have
				been added for features no longer supported by RabbitMQ 3.1.x -
				federated exchanges and the <code>immediate</code> property on
				the <classname>RabbitTemplate</classname>.
			</para>
		</section>
		<section>
			<title>Rabbit Admin</title>
			<para>
				The <classname>RabbitAdmin</classname> now provides an option to allow
				exchange, queue, and binding declarations to continue when a declaration
				fails. Previously, all declarations stopped on a failure. By setting
				<code>ignore-declaration-exceptions</code>, such exceptions are logged (WARN),
				but further declarations continue. An example where this might be useful is
				when a queue declaration fails because of a slightly different <code>ttl</code>
				setting would normally stop other declarations from proceeding.
			</para>
			<para>
				The <classname>RabbitAdmin</classname> now provides an additional method
				<code>getQueueProperties()</code>. This can be used to determine if a queue
				exists on the broker (returns null for a non-existent queue). In addition,
				the current number of messages in the queue, as well as the current number
				of consumers is returned.
			</para>
		</section>
		<section>
			<title>Rabbit Template</title>
			<para>
				Previously, when using the <code>...sendAndReceive()</code> methods were used
				with a fixed reply queue, two custom headers were used for correlation
				data and to retain/restore reply queue information. With this release, the
				standard message property <code>correlationId</code> is used by default,
				although the user can specifiy a custom property to use instead. In addition,
				nested <code>replyTo</code> information is now retained internally in the template,
				instead of using a custom header.
			</para>
			<para>
				The <code>immediate</code> property is deprecated; users must not set this
				property when using RabbitMQ 3.0.x or greater.
			</para>
		</section>
		<section>
			<title>JSON Message Converters</title>
			<para>
				A Jackson 2.x <classname>MessageConverter</classname> is now provided, along
				with the existing converter that uses Jackson 1.x.
			</para>
		</section>
		<section>
			<title>Automatic Declaration of Queues, etc</title>
			<para>
				Previously, when declaring queues, exchanges and bindings, it was not possible
				to define which connection factory was used for the declarations, each
				<classname>RabbitAdmin</classname> would declare all components using
				its connection.
			</para>
			<para>
				Starting with this release, it is now possible to limit declarations to specific
				<classname>RabbitAdmin</classname> instances. See <xref linkend="conditional-declaration" />.
			</para>
		</section>
		<section>
			<title>AMQP Remoting</title>
			<para>
				Facilities are now provided for using Spring Remoting techniques, using AMQP
				as the transport for the RPC calls. For more information see <xref linkend="remoting"/>
			</para>
		</section>
		<section>
			<title>Requested Heart Beats</title>
			<para>
				Several users have asked for the underlying client connection factory's <code>requestedHeartBeats</code>
				property to be exposed on the Spring AMQP <classname>CachingConnectionFactory</classname>. This is
				now available; previously, it was necessary to configure the AMQP client factory as
				a separate bean and provide a reference to it in the <classname>CachingConnectionFactory</classname>.
			</para>
		</section>
	</section>

	<section>
		<title>Changes to 1.1 Since 1.0</title>
		<section>
			<title>General</title>
			<para>
				Spring-AMQP is now built using gradle.
			</para>
			<para>
				Adds support for publisher confirms and returns.
			</para>
			<para>
				Adds support for HA queues, and broker failover.
			</para>
			<para>
				Adds support for Dead Letter Exchanges/Dead Letter Queues.
			</para>
		</section>
		<section>
			<title>AMQP Log4j Appender</title>
			<para>
				Adds an option to support adding a message id to logged messages.
			</para>
			<para>
				Adds an option to allow the specification of a <code>Charset</code>
				name to be used when converting <classname>String</classname>s to
				<code>byte[]</code>.
			</para>
		</section>
	</section>
</chapter>
