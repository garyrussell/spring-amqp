<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="whats-new"
	xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>What's New</title>

	<section>
		<title>Changes to 1.2 Since 1.1</title>
		<section>
			<title>RabbitMQ Version</title>
			<para>
				Spring AMQP now using RabbitMQ 3.0.x by default (but retains
				compatibility with earlier versions). Certain deprecations have
				been added for features no longer supported by RabbitMQ 3.0.x -
				federated exchanges and the <code>immediate</code> property on
				the <classname>RabbitTemplate</classname>.
			</para>
		</section>
		<section>
			<title>Rabbit Admin</title>
			<para>
				The <classname>RabbitAdmin</classname> now provides an option to allow
				exchange, queue, and binding declarations to continue when a declaration
				fails. Previously, all declarations stopped on a failure. By setting
				<code>ignore-declaration-exceptions</code>, such exceptions are logged (WARN),
				but further declarations continue. An example where this might be useful is
				when a queue declaration fails because of a slightly different <code>ttl</code>
				setting would normally stop other declarations from proceeding.
			</para>
			<para>
				The <classname>RabbitAdmin</classname> now provides an additional method
				<code>getQueueProperties()</code>. This can be used to determine if a queue
				exists on the broker (returns null for a non-existent queue). In addition,
				the current number of messages in the queue, as well as the current number
				of consumers is returned.
			</para>
		</section>
		<section>
			<title>Rabbit Template</title>
			<para>
				Previously, when using the <code>...sendAndReceive()</code> methods were used
				with a fixed reply queue, two custom headers were used for correlation
				data and to retain/restore reply queue information. With this release, the
				standard message property <code>correlationId</code> is used by default,
				although the user can specifiy a custom property to use instead. In addition,
				nested <code>replyTo</code> information is now retained internally in the template,
				instead of using a custom header.
			</para>
			<para>
				The <code>immediate</code> property is deprecated; users must not set this
				property when using RabbitMQ 3.0.x or greater.
			</para>
		</section>
		<section>
			<title>JSON Message Converters</title>
			<para>
				A Jackson 2.x <classname>MessageConverter</classname> is now provided, along
				with the existing converter that uses Jackson 1.x.
			</para>
		</section>
		<section>
			<title>AMQP Remoting</title>
			<para>
				Facilities are now provided for using Spring Remoting techniques, using AMQP
				as the transport for the RPC calls. For more information see <xref linkend="remoting"/>
			</para>
		</section>
	</section>

	<section>
		<title>Changes to 1.1 Since 1.0</title>
		<section>
			<title>General</title>
			<para>
				Spring-AMQP is now built using gradle.
			</para>
			<para>
				Adds support for publisher confirms and returns.
			</para>
			<para>
				Adds support for HA queues, and broker failover.
			</para>
			<para>
				Adds support for Dead Letter Exchanges/Dead Letter Queues.
			</para>
		</section>
		<section>
			<title>AMQP Log4j Appender</title>
			<para>
				Adds an option to support adding a message id to logged messages.
			</para>
			<para>
				Adds an option to allow the specification of a <code>Charset</code>
				name to be used when converting <classname>String</classname>s to
				<code>byte[]</code>.
			</para>
		</section>
	</section>
</chapter>
